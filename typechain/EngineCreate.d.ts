/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EngineCreateInterface extends ethers.utils.Interface {
  functions: {
    "CALLER()": FunctionFragment;
    "create(uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "createCallback(uint256,uint256,bytes)": FunctionFragment;
    "engine()": FunctionFragment;
    "fetch(bytes32)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "risky()": FunctionFragment;
    "stable()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CALLER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "fetch", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CALLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;

  events: {};
}

export class EngineCreate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EngineCreateInterface;

  functions: {
    CALLER(overrides?: CallOverrides): Promise<[string]>;

    "CALLER()"(overrides?: CallOverrides): Promise<[string]>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createCallback(uint256,uint256,bytes)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    "engine()"(overrides?: CallOverrides): Promise<[string]>;

    fetch(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "fetch(bytes32)"(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    initialize(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    risky(overrides?: CallOverrides): Promise<[string]>;

    "risky()"(overrides?: CallOverrides): Promise<[string]>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    "stable()"(overrides?: CallOverrides): Promise<[string]>;
  };

  CALLER(overrides?: CallOverrides): Promise<string>;

  "CALLER()"(overrides?: CallOverrides): Promise<string>;

  create(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    riskyPrice: BigNumberish,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(uint256,uint256,uint256,uint256,uint256,bytes)"(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    riskyPrice: BigNumberish,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCallback(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createCallback(uint256,uint256,bytes)"(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  engine(overrides?: CallOverrides): Promise<string>;

  "engine()"(overrides?: CallOverrides): Promise<string>;

  fetch(
    pid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  "fetch(bytes32)"(
    pid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  initialize(
    _engine: string,
    _risky: string,
    _stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _engine: string,
    _risky: string,
    _stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  risky(overrides?: CallOverrides): Promise<string>;

  "risky()"(overrides?: CallOverrides): Promise<string>;

  stable(overrides?: CallOverrides): Promise<string>;

  "stable()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CALLER(overrides?: CallOverrides): Promise<string>;

    "CALLER()"(overrides?: CallOverrides): Promise<string>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(uint256,uint256,uint256,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCallback(uint256,uint256,bytes)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    engine(overrides?: CallOverrides): Promise<string>;

    "engine()"(overrides?: CallOverrides): Promise<string>;

    fetch(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "fetch(bytes32)"(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    initialize(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    risky(overrides?: CallOverrides): Promise<string>;

    "risky()"(overrides?: CallOverrides): Promise<string>;

    stable(overrides?: CallOverrides): Promise<string>;

    "stable()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    CALLER(overrides?: CallOverrides): Promise<BigNumber>;

    "CALLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(uint256,uint256,uint256,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createCallback(uint256,uint256,bytes)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    "engine()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetch(pid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "fetch(bytes32)"(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    "risky()"(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    "stable()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CALLER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCallback(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createCallback(uint256,uint256,bytes)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "engine()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetch(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetch(bytes32)"(
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _engine: string,
      _risky: string,
      _stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "risky()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
