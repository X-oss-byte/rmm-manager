/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPrimitiveEngineEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Allocated(address,uint256,uint256)": EventFragment;
    "Borrowed(address,bytes32,uint256,uint256)": EventFragment;
    "Claimed(address,bytes32,uint256)": EventFragment;
    "Created(address,uint256,uint256,uint256)": EventFragment;
    "Deposited(address,address,uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "Loaned(address,bytes32,uint256)": EventFragment;
    "Removed(address,uint256,uint256)": EventFragment;
    "Repaid(address,bytes32,uint256)": EventFragment;
    "Swap(address,bytes32,bool,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Loaned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class IPrimitiveEngineEvents extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimitiveEngineEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    Allocated(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Borrowed(
      recipient: string | null,
      poolId: BytesLike | null,
      delLiquidity: null,
      maxPremium: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        recipient: string;
        poolId: string;
        delLiquidity: BigNumber;
        maxPremium: BigNumber;
      }
    >;

    Claimed(
      from: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; poolId: string; delLiquidity: BigNumber }
    >;

    Created(
      from: string | null,
      strike: BigNumberish | null,
      sigma: null,
      time: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { from: string; strike: BigNumber; sigma: BigNumber; time: BigNumber }
    >;

    Deposited(
      from: string | null,
      owner: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; owner: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Flash(
      from: string | null,
      receiver: string | null,
      token: string | null,
      amount: null,
      payment: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        from: string;
        receiver: string;
        token: string;
        amount: BigNumber;
        payment: BigNumber;
      }
    >;

    Loaned(
      from: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; poolId: string; delLiquidity: BigNumber }
    >;

    Removed(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Repaid(
      owner: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; poolId: string; delLiquidity: BigNumber }
    >;

    Swap(
      from: string | null,
      poolId: BytesLike | null,
      addXRemoveY: boolean | null,
      deltaIn: null,
      deltaOut: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        from: string;
        poolId: string;
        addXRemoveY: boolean;
        deltaIn: BigNumber;
        deltaOut: BigNumber;
      }
    >;

    Withdrawn(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
