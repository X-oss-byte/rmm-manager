/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPrimitiveEngineViewInterface extends ethers.utils.Interface {
  functions: {
    "compute(bytes32,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getPoolId(uint256,uint64,uint32)": FunctionFragment;
    "invariantOf(bytes32)": FunctionFragment;
    "margins(address)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "reserves(bytes32)": FunctionFragment;
    "risky()": FunctionFragment;
    "settings(bytes32)": FunctionFragment;
    "stable()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "compute",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolId",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invariantOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "margins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reserves", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "settings", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;

  decodeFunctionResult(functionFragment: "compute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invariantOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "margins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;

  events: {};
}

export class IPrimitiveEngineView extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimitiveEngineViewInterface;

  functions: {
    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveOfToken: BigNumber }>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveOfToken: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    positions(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "positions(bytes32)"(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    "reserves(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<[string]>;

    "risky()"(overrides?: CallOverrides): Promise<[string]>;

    settings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        time: number;
        blockTimestamp: number;
      }
    >;

    "settings(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        time: number;
        blockTimestamp: number;
      }
    >;

    stable(overrides?: CallOverrides): Promise<[string]>;

    "stable()"(overrides?: CallOverrides): Promise<[string]>;
  };

  compute(
    poolId: BytesLike,
    token: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "compute(bytes32,address,uint256)"(
    poolId: BytesLike,
    token: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getPoolId(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPoolId(uint256,uint64,uint32)"(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  invariantOf(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "invariantOf(bytes32)"(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  margins(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  "margins(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  positions(
    posId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  "positions(bytes32)"(
    posId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  reserves(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      float: BigNumber;
      debt: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  "reserves(bytes32)"(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      float: BigNumber;
      debt: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  risky(overrides?: CallOverrides): Promise<string>;

  "risky()"(overrides?: CallOverrides): Promise<string>;

  settings(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      strike: BigNumber;
      sigma: BigNumber;
      time: number;
      blockTimestamp: number;
    }
  >;

  "settings(bytes32)"(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      strike: BigNumber;
      sigma: BigNumber;
      time: number;
      blockTimestamp: number;
    }
  >;

  stable(overrides?: CallOverrides): Promise<string>;

  "stable()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    positions(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "positions(bytes32)"(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    "reserves(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<string>;

    "risky()"(overrides?: CallOverrides): Promise<string>;

    settings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        time: number;
        blockTimestamp: number;
      }
    >;

    "settings(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        time: number;
        blockTimestamp: number;
      }
    >;

    stable(overrides?: CallOverrides): Promise<string>;

    "stable()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    margins(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(posId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "positions(bytes32)"(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserves(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "reserves(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    "risky()"(overrides?: CallOverrides): Promise<BigNumber>;

    settings(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "settings(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    "stable()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(bytes32)"(
      posId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserves(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserves(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "risky()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settings(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
