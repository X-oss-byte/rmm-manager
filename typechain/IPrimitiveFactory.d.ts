/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPrimitiveFactoryInterface extends ethers.utils.Interface {
  functions: {
    "args()": FunctionFragment;
    "deploy(address,address)": FunctionFragment;
    "getEngine(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "args", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEngine",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "args", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEngine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "Deployed(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export class IPrimitiveFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPrimitiveFactoryInterface;

  functions: {
    args(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        factory: string;
        risky: string;
        stable: string;
      }
    >;

    "args()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        factory: string;
        risky: string;
        stable: string;
      }
    >;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,address)"(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEngine(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<[string] & { engine: string }>;

    "getEngine(address,address)"(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<[string] & { engine: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;
  };

  args(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      factory: string;
      risky: string;
      stable: string;
    }
  >;

  "args()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      factory: string;
      risky: string;
      stable: string;
    }
  >;

  deploy(
    risky: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,address)"(
    risky: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEngine(
    risky: string,
    stable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEngine(address,address)"(
    risky: string,
    stable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    args(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        factory: string;
        risky: string;
        stable: string;
      }
    >;

    "args()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        factory: string;
        risky: string;
        stable: string;
      }
    >;

    deploy(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,address)"(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getEngine(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEngine(address,address)"(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deployed(
      from: string | null,
      risky: string | null,
      stable: string | null,
      engine: null
    ): TypedEventFilter<
      [string, string, string, string],
      { from: string; risky: string; stable: string; engine: string }
    >;
  };

  estimateGas: {
    args(overrides?: CallOverrides): Promise<BigNumber>;

    "args()"(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deploy(address,address)"(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEngine(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEngine(address,address)"(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    args(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "args()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,address)"(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEngine(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEngine(address,address)"(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
