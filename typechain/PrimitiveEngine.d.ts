/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PrimitiveEngineInterface extends ethers.utils.Interface {
  functions: {
    "allocate(bytes32,address,uint256,bool,bytes)": FunctionFragment;
    "borrow(bytes32,uint256,uint256,bytes)": FunctionFragment;
    "claim(bytes32,uint256)": FunctionFragment;
    "compute(bytes32,address,uint256)": FunctionFragment;
    "create(uint256,uint64,uint32,uint256,uint256,bytes)": FunctionFragment;
    "deposit(address,uint256,uint256,bytes)": FunctionFragment;
    "factory()": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "getPoolId(uint256,uint64,uint32)": FunctionFragment;
    "invariantOf(bytes32)": FunctionFragment;
    "lend(bytes32,uint256)": FunctionFragment;
    "margins(address)": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "remove(bytes32,uint256,bool,bytes)": FunctionFragment;
    "repay(bytes32,address,uint256,bool,bytes)": FunctionFragment;
    "reserves(bytes32)": FunctionFragment;
    "risky()": FunctionFragment;
    "settings(bytes32)": FunctionFragment;
    "stable()": FunctionFragment;
    "swap(bytes32,bool,uint256,uint256,bool,bytes)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, string, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compute",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolId",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invariantOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "margins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BytesLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BytesLike, string, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reserves", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "settings", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BytesLike, boolean, BigNumberish, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invariantOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "margins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Allocated(address,uint256,uint256)": EventFragment;
    "Borrowed(address,bytes32,uint256,uint256)": EventFragment;
    "Claimed(address,bytes32,uint256)": EventFragment;
    "Created(address,uint256,uint256,uint256)": EventFragment;
    "Deposited(address,address,uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "Loaned(address,bytes32,uint256)": EventFragment;
    "Removed(address,uint256,uint256)": EventFragment;
    "Repaid(address,bytes32,uint256)": EventFragment;
    "Swap(address,bytes32,bool,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Loaned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class PrimitiveEngine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimitiveEngineInterface;

  functions: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocate(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(bytes32,uint256,uint256,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveOfToken: BigNumber }>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserveOfToken: BigNumber }>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(uint256,uint64,uint32,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { poolId: string }>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { poolId: string }>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invariant: BigNumber }>;

    lend(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "remove(bytes32,uint256,bool,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repay(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    "reserves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<[string]>;

    "risky()"(overrides?: CallOverrides): Promise<[string]>;

    settings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        maturity: number;
        lastTimestamp: number;
      }
    >;

    "settings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        maturity: number;
        lastTimestamp: number;
      }
    >;

    stable(overrides?: CallOverrides): Promise<[string]>;

    "stable()"(overrides?: CallOverrides): Promise<[string]>;

    swap(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swap(bytes32,bool,uint256,uint256,bool,bytes)"(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocate(
    poolId: BytesLike,
    owner: string,
    delLiquidity: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocate(bytes32,address,uint256,bool,bytes)"(
    poolId: BytesLike,
    owner: string,
    delLiquidity: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    maxPremium: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(bytes32,uint256,uint256,bytes)"(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    maxPremium: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(bytes32,uint256)"(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compute(
    poolId: BytesLike,
    token: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "compute(bytes32,address,uint256)"(
    poolId: BytesLike,
    token: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  create(
    strike: BigNumberish,
    sigma: BigNumberish,
    maturity: BigNumberish,
    riskyPrice: BigNumberish,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(uint256,uint64,uint32,uint256,uint256,bytes)"(
    strike: BigNumberish,
    sigma: BigNumberish,
    maturity: BigNumberish,
    riskyPrice: BigNumberish,
    delLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256,bytes)"(
    owner: string,
    delRisky: BigNumberish,
    delStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  flashFee(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "flashFee(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flashLoan(address,address,uint256,bytes)"(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoolId(
    strike: BigNumberish,
    sigma: BigNumberish,
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPoolId(uint256,uint64,uint32)"(
    strike: BigNumberish,
    sigma: BigNumberish,
    maturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  invariantOf(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "invariantOf(bytes32)"(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lend(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(bytes32,uint256)"(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  margins(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  "margins(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "maxFlashLoan(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  "positions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  remove(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    toMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "remove(bytes32,uint256,bool,bytes)"(
    poolId: BytesLike,
    delLiquidity: BigNumberish,
    toMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    poolId: BytesLike,
    owner: string,
    delLiquidity: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repay(bytes32,address,uint256,bool,bytes)"(
    poolId: BytesLike,
    owner: string,
    delLiquidity: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserves(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      float: BigNumber;
      debt: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  "reserves(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reserveRisky: BigNumber;
      reserveStable: BigNumber;
      liquidity: BigNumber;
      float: BigNumber;
      debt: BigNumber;
      blockTimestamp: number;
      cumulativeRisky: BigNumber;
      cumulativeStable: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  risky(overrides?: CallOverrides): Promise<string>;

  "risky()"(overrides?: CallOverrides): Promise<string>;

  settings(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      strike: BigNumber;
      sigma: BigNumber;
      maturity: number;
      lastTimestamp: number;
    }
  >;

  "settings(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      strike: BigNumber;
      sigma: BigNumber;
      maturity: number;
      lastTimestamp: number;
    }
  >;

  stable(overrides?: CallOverrides): Promise<string>;

  "stable()"(overrides?: CallOverrides): Promise<string>;

  swap(
    poolId: BytesLike,
    riskyForStable: boolean,
    deltaOut: BigNumberish,
    deltaInMax: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swap(bytes32,bool,uint256,uint256,bool,bytes)"(
    poolId: BytesLike,
    riskyForStable: boolean,
    deltaOut: BigNumberish,
    deltaInMax: BigNumberish,
    fromMargin: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    delRisky: BigNumberish,
    delStable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { delRisky: BigNumber; delStable: BigNumber }
    >;

    "allocate(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { delRisky: BigNumber; delStable: BigNumber }
    >;

    borrow(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(bytes32,uint256,uint256,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        poolId: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;

    "create(uint256,uint64,uint32,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        poolId: string;
        delRisky: BigNumber;
        delStable: BigNumber;
      }
    >;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lend(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { delRisky: BigNumber; delStable: BigNumber }
    >;

    "remove(bytes32,uint256,bool,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { delRisky: BigNumber; delStable: BigNumber }
    >;

    repay(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        delRisky: BigNumber;
        delStable: BigNumber;
        premium: BigNumber;
      }
    >;

    "repay(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        delRisky: BigNumber;
        delStable: BigNumber;
        premium: BigNumber;
      }
    >;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    "reserves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reserveRisky: BigNumber;
        reserveStable: BigNumber;
        liquidity: BigNumber;
        float: BigNumber;
        debt: BigNumber;
        blockTimestamp: number;
        cumulativeRisky: BigNumber;
        cumulativeStable: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    risky(overrides?: CallOverrides): Promise<string>;

    "risky()"(overrides?: CallOverrides): Promise<string>;

    settings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        maturity: number;
        lastTimestamp: number;
      }
    >;

    "settings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        strike: BigNumber;
        sigma: BigNumber;
        maturity: number;
        lastTimestamp: number;
      }
    >;

    stable(overrides?: CallOverrides): Promise<string>;

    "stable()"(overrides?: CallOverrides): Promise<string>;

    swap(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap(bytes32,bool,uint256,uint256,bool,bytes)"(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Allocated(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Borrowed(
      recipient: string | null,
      poolId: BytesLike | null,
      delLiquidity: null,
      maxPremium: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        recipient: string;
        poolId: string;
        delLiquidity: BigNumber;
        maxPremium: BigNumber;
      }
    >;

    Claimed(
      from: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; poolId: string; delLiquidity: BigNumber }
    >;

    Created(
      from: string | null,
      strike: BigNumberish | null,
      sigma: null,
      time: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { from: string; strike: BigNumber; sigma: BigNumber; time: BigNumber }
    >;

    Deposited(
      from: string | null,
      owner: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; owner: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Flash(
      from: string | null,
      receiver: string | null,
      token: string | null,
      amount: null,
      payment: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        from: string;
        receiver: string;
        token: string;
        amount: BigNumber;
        payment: BigNumber;
      }
    >;

    Loaned(
      from: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; poolId: string; delLiquidity: BigNumber }
    >;

    Removed(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;

    Repaid(
      owner: string | null,
      poolId: BytesLike | null,
      delLiquidity: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; poolId: string; delLiquidity: BigNumber }
    >;

    Swap(
      from: string | null,
      poolId: BytesLike | null,
      addXRemoveY: boolean | null,
      deltaIn: null,
      deltaOut: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        from: string;
        poolId: string;
        addXRemoveY: boolean;
        deltaIn: BigNumber;
        deltaOut: BigNumber;
      }
    >;

    Withdrawn(
      from: string | null,
      delRisky: null,
      delStable: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; delRisky: BigNumber; delStable: BigNumber }
    >;
  };

  estimateGas: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocate(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(bytes32,uint256,uint256,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(uint256,uint64,uint32,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    margins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "remove(bytes32,uint256,bool,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repay(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserves(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "reserves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    "risky()"(overrides?: CallOverrides): Promise<BigNumber>;

    settings(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "settings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    "stable()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swap(bytes32,bool,uint256,uint256,bool,bytes)"(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocate(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(bytes32,uint256,uint256,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      maxPremium: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compute(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "compute(bytes32,address,uint256)"(
      poolId: BytesLike,
      token: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint64,uint32,uint256,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      riskyPrice: BigNumberish,
      delLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      delRisky: BigNumberish,
      delStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoolId(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolId(uint256,uint64,uint32)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invariantOf(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invariantOf(bytes32)"(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(bytes32,uint256)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "remove(bytes32,uint256,bool,bytes)"(
      poolId: BytesLike,
      delLiquidity: BigNumberish,
      toMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repay(bytes32,address,uint256,bool,bytes)"(
      poolId: BytesLike,
      owner: string,
      delLiquidity: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "risky()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swap(bytes32,bool,uint256,uint256,bool,bytes)"(
      poolId: BytesLike,
      riskyForStable: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      fromMargin: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      delRisky: BigNumberish,
      delStable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
