/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PrimitiveHouseInterface extends ethers.utils.Interface {
  functions: {
    "CALLER()": FunctionFragment;
    "NO_CALLER()": FunctionFragment;
    "_margins(address)": FunctionFragment;
    "_positions(bytes32)": FunctionFragment;
    "allocateCallback(uint256,uint256,bytes)": FunctionFragment;
    "allocateFromExternal(bytes32,address,uint256,bytes)": FunctionFragment;
    "allocateFromMargin(bytes32,address,uint256,bytes)": FunctionFragment;
    "borrow(bytes32,address,uint256,bytes)": FunctionFragment;
    "borrowCallback(uint256,uint256,uint256,bytes)": FunctionFragment;
    "create(uint256,uint64,uint32,uint256,bytes)": FunctionFragment;
    "createCallback(uint256,uint256,bytes)": FunctionFragment;
    "deposit(address,uint256,uint256,bytes)": FunctionFragment;
    "depositCallback(uint256,uint256,bytes)": FunctionFragment;
    "engine()": FunctionFragment;
    "getPosition(address,bytes32)": FunctionFragment;
    "initialize(address,address,uint24)": FunctionFragment;
    "lend(bytes32,uint256)": FunctionFragment;
    "margins(address)": FunctionFragment;
    "removeCallback(uint256,uint256,bytes)": FunctionFragment;
    "repayFromExternal(bytes32,address,uint256,bytes)": FunctionFragment;
    "repayFromExternalCallback(uint256,bytes)": FunctionFragment;
    "repayFromMargin(bytes32,address,uint256,bytes)": FunctionFragment;
    "risky()": FunctionFragment;
    "stable()": FunctionFragment;
    "swap(bytes32,bool,uint256,uint256,bytes)": FunctionFragment;
    "swapCallback(uint256,uint256,bytes)": FunctionFragment;
    "swapXForY(bytes32,uint256)": FunctionFragment;
    "swapYForX(bytes32,uint256)": FunctionFragment;
    "uniFactory()": FunctionFragment;
    "uniPool()": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CALLER", values?: undefined): string;
  encodeFunctionData(functionFragment: "NO_CALLER", values?: undefined): string;
  encodeFunctionData(functionFragment: "_margins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromExternal",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFromMargin",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCallback",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "margins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromExternal",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromExternalCallback",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromMargin",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "risky", values?: undefined): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BytesLike, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapXForY",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYForX",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uniPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CALLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NO_CALLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_margins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateFromMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "margins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromExternalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFromMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "risky", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapXForY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapYForX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class PrimitiveHouse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimitiveHouseInterface;

  functions: {
    CALLER(overrides?: CallOverrides): Promise<[string]>;

    "CALLER()"(overrides?: CallOverrides): Promise<[string]>;

    NO_CALLER(overrides?: CallOverrides): Promise<[string]>;

    "NO_CALLER()"(overrides?: CallOverrides): Promise<[string]>;

    _margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "_margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    _positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "_positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    allocateCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocateCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocateFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocateFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocateFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowCallback(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrowCallback(uint256,uint256,uint256,bytes)"(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(uint256,uint64,uint32,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    "engine()"(overrides?: CallOverrides): Promise<[string]>;

    getPosition(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          float: BigNumber;
          liquidity: BigNumber;
          debt: BigNumber;
        }
      ] & {
        pos: [BigNumber, BigNumber, BigNumber] & {
          float: BigNumber;
          liquidity: BigNumber;
          debt: BigNumber;
        };
      }
    >;

    "getPosition(address,bytes32)"(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          float: BigNumber;
          liquidity: BigNumber;
          debt: BigNumber;
        }
      ] & {
        pos: [BigNumber, BigNumber, BigNumber] & {
          float: BigNumber;
          liquidity: BigNumber;
          debt: BigNumber;
        };
      }
    >;

    initialize(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint24)"(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lend(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(bytes32,uint256)"(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          balanceRisky: BigNumber;
          balanceStable: BigNumber;
        }
      ] & {
        mar: [BigNumber, BigNumber] & {
          balanceRisky: BigNumber;
          balanceStable: BigNumber;
        };
      }
    >;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          balanceRisky: BigNumber;
          balanceStable: BigNumber;
        }
      ] & {
        mar: [BigNumber, BigNumber] & {
          balanceRisky: BigNumber;
          balanceStable: BigNumber;
        };
      }
    >;

    removeCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repayFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayFromExternalCallback(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repayFromExternalCallback(uint256,bytes)"(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "repayFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    risky(overrides?: CallOverrides): Promise<[string]>;

    "risky()"(overrides?: CallOverrides): Promise<[string]>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    "stable()"(overrides?: CallOverrides): Promise<[string]>;

    swap(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swap(bytes32,bool,uint256,uint256,bytes)"(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapXForY(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapXForY(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapYForX(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapYForX(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniFactory(overrides?: CallOverrides): Promise<[string]>;

    "uniFactory()"(overrides?: CallOverrides): Promise<[string]>;

    uniPool(overrides?: CallOverrides): Promise<[string]>;

    "uniPool()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CALLER(overrides?: CallOverrides): Promise<string>;

  "CALLER()"(overrides?: CallOverrides): Promise<string>;

  NO_CALLER(overrides?: CallOverrides): Promise<string>;

  "NO_CALLER()"(overrides?: CallOverrides): Promise<string>;

  _margins(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  "_margins(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  _positions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  "_positions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  allocateCallback(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocateCallback(uint256,uint256,bytes)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromExternal(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocateFromExternal(bytes32,address,uint256,bytes)"(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocateFromMargin(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocateFromMargin(bytes32,address,uint256,bytes)"(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(bytes32,address,uint256,bytes)"(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowCallback(
    deltaL: BigNumberish,
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrowCallback(uint256,uint256,uint256,bytes)"(
    deltaL: BigNumberish,
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    riskyPrice: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(uint256,uint64,uint32,uint256,bytes)"(
    strike: BigNumberish,
    sigma: BigNumberish,
    time: BigNumberish,
    riskyPrice: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCallback(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createCallback(uint256,uint256,bytes)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    owner: string,
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256,bytes)"(
    owner: string,
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCallback(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositCallback(uint256,uint256,bytes)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  engine(overrides?: CallOverrides): Promise<string>;

  "engine()"(overrides?: CallOverrides): Promise<string>;

  getPosition(
    owner: string,
    pid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  "getPosition(address,bytes32)"(
    owner: string,
    pid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      float: BigNumber;
      liquidity: BigNumber;
      debt: BigNumber;
    }
  >;

  initialize(
    engine_: string,
    factory_: string,
    fee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint24)"(
    engine_: string,
    factory_: string,
    fee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lend(
    pid: BytesLike,
    deltaL: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(bytes32,uint256)"(
    pid: BytesLike,
    deltaL: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  margins(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  "margins(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balanceRisky: BigNumber;
      balanceStable: BigNumber;
    }
  >;

  removeCallback(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeCallback(uint256,uint256,bytes)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayFromExternal(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repayFromExternal(bytes32,address,uint256,bytes)"(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayFromExternalCallback(
    deltaStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repayFromExternalCallback(uint256,bytes)"(
    deltaStable: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayFromMargin(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "repayFromMargin(bytes32,address,uint256,bytes)"(
    pid: BytesLike,
    owner: string,
    deltaL: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  risky(overrides?: CallOverrides): Promise<string>;

  "risky()"(overrides?: CallOverrides): Promise<string>;

  stable(overrides?: CallOverrides): Promise<string>;

  "stable()"(overrides?: CallOverrides): Promise<string>;

  swap(
    pid: BytesLike,
    addXRemoveY: boolean,
    deltaOut: BigNumberish,
    deltaInMax: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swap(bytes32,bool,uint256,uint256,bytes)"(
    pid: BytesLike,
    addXRemoveY: boolean,
    deltaOut: BigNumberish,
    deltaInMax: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCallback(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapCallback(uint256,uint256,bytes)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapXForY(
    pid: BytesLike,
    deltaOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapXForY(bytes32,uint256)"(
    pid: BytesLike,
    deltaOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapYForX(
    pid: BytesLike,
    deltaOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapYForX(bytes32,uint256)"(
    pid: BytesLike,
    deltaOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniFactory(overrides?: CallOverrides): Promise<string>;

  "uniFactory()"(overrides?: CallOverrides): Promise<string>;

  uniPool(overrides?: CallOverrides): Promise<string>;

  "uniPool()"(overrides?: CallOverrides): Promise<string>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    date: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "uniswapV3SwapCallback(int256,int256,bytes)"(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    date: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    deltaX: BigNumberish,
    deltaY: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLER(overrides?: CallOverrides): Promise<string>;

    "CALLER()"(overrides?: CallOverrides): Promise<string>;

    NO_CALLER(overrides?: CallOverrides): Promise<string>;

    "NO_CALLER()"(overrides?: CallOverrides): Promise<string>;

    _margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "_margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    _positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "_positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    allocateCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocateCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocateFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocateFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowCallback(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrowCallback(uint256,uint256,uint256,bytes)"(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(uint256,uint64,uint32,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    engine(overrides?: CallOverrides): Promise<string>;

    "engine()"(overrides?: CallOverrides): Promise<string>;

    getPosition(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    "getPosition(address,bytes32)"(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        float: BigNumber;
        liquidity: BigNumber;
        debt: BigNumber;
      }
    >;

    initialize(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint24)"(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lend(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lend(bytes32,uint256)"(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceRisky: BigNumber;
        balanceStable: BigNumber;
      }
    >;

    removeCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    repayFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "repayFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    repayFromExternalCallback(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "repayFromExternalCallback(uint256,bytes)"(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    repayFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "repayFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    risky(overrides?: CallOverrides): Promise<string>;

    "risky()"(overrides?: CallOverrides): Promise<string>;

    stable(overrides?: CallOverrides): Promise<string>;

    "stable()"(overrides?: CallOverrides): Promise<string>;

    swap(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(bytes32,bool,uint256,uint256,bytes)"(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapXForY(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapXForY(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapYForX(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapYForX(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uniFactory(overrides?: CallOverrides): Promise<string>;

    "uniFactory()"(overrides?: CallOverrides): Promise<string>;

    uniPool(overrides?: CallOverrides): Promise<string>;

    "uniPool()"(overrides?: CallOverrides): Promise<string>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CALLER(overrides?: CallOverrides): Promise<BigNumber>;

    "CALLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    NO_CALLER(overrides?: CallOverrides): Promise<BigNumber>;

    "NO_CALLER()"(overrides?: CallOverrides): Promise<BigNumber>;

    _margins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "_positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocateCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocateCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocateFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocateFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocateFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowCallback(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrowCallback(uint256,uint256,uint256,bytes)"(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(uint256,uint64,uint32,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    "engine()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(address,bytes32)"(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,uint24)"(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lend(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(bytes32,uint256)"(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    margins(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repayFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayFromExternalCallback(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repayFromExternalCallback(uint256,bytes)"(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "repayFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    risky(overrides?: CallOverrides): Promise<BigNumber>;

    "risky()"(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    "stable()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swap(bytes32,bool,uint256,uint256,bytes)"(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapXForY(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapXForY(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapYForX(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapYForX(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniPool(overrides?: CallOverrides): Promise<BigNumber>;

    "uniPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CALLER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NO_CALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NO_CALLER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _margins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_margins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_positions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocateCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocateCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocateFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocateFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocateFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowCallback(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrowCallback(uint256,uint256,uint256,bytes)"(
      deltaL: BigNumberish,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint64,uint32,uint256,bytes)"(
      strike: BigNumberish,
      sigma: BigNumberish,
      time: BigNumberish,
      riskyPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256,bytes)"(
      owner: string,
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "engine()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(address,bytes32)"(
      owner: string,
      pid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint24)"(
      engine_: string,
      factory_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lend(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(bytes32,uint256)"(
      pid: BytesLike,
      deltaL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    margins(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "margins(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayFromExternal(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repayFromExternal(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayFromExternalCallback(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repayFromExternalCallback(uint256,bytes)"(
      deltaStable: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayFromMargin(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "repayFromMargin(bytes32,address,uint256,bytes)"(
      pid: BytesLike,
      owner: string,
      deltaL: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    risky(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "risky()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swap(bytes32,bool,uint256,uint256,bytes)"(
      pid: BytesLike,
      addXRemoveY: boolean,
      deltaOut: BigNumberish,
      deltaInMax: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCallback(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapCallback(uint256,uint256,bytes)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapXForY(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapXForY(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapYForX(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapYForX(bytes32,uint256)"(
      pid: BytesLike,
      deltaOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "uniswapV3SwapCallback(int256,int256,bytes)"(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      date: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      deltaX: BigNumberish,
      deltaY: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
